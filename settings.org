* MELPA
  #+BEGIN_SRC emacs-lisp
    (require 'package)
    (setq package-enable-at-startup nil)
    (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
    (package-initialize)

    (unless (package-installed-p 'use-package)
      (package-refresh-contents)
      (package-install 'use-package))

    (eval-when-compile
      (require 'use-package))
  #+END_SRC
* EXWM
  #+BEGIN_SRC emacs-lisp
    (ido-mode 1)

    ;; (see next section).
    ;; (server-start)

    ;; (require 'exwm)

    ;; (require 'exwm-config)
    ;; (exwm-config-ido)

    ;; (require 'exwm-randr)
    ;; (setq exwm-randr-workspace-output-plist '(0 "HDMI1" 1 "eDP1"))
    ;; (add-hook 'exwm-randr-screen-change-hook
    ;; 	(lambda ()
    ;; 	  (start-process-shell-command
    ;; 	  "xrandr" nil "xrandr --output HDMI1 --mode 1920x1080 --primary --left-of eDP1 --output eDP1 --off")))
    ;;           ;;"xrandr" nil "xrandr --output HDMI1 --mode 1920x1080 --primary --left-of eDP1 --output eDP1 --mode 1366x768")))
    ;; 	  ;;"xrandr" nil "xrandr --output eDP1 --mode 1366x768")))
    ;; (exwm-randr-enable)

    ;; ;; Set the initial number of workspaces (they can also be created later).
    ;; (setq exwm-workspace-number 2)

    ;; (setq exwm-input-global-keys
    ;;      `(
    ;;        ([?\s-d] . dmenu)
    ;;        ([?\s-e] . eshell)))

    ;; (add-hook 'exwm-update-class-hook
    ;; 	  (lambda ()
    ;; 	    (unless (or (string-prefix-p "sun-awt-X11-" exwm-instance-name)
    ;; 			(string= "gimp" exwm-instance-name))
    ;; 	      (exwm-workspace-rename-buffer exwm-class-name))))
    ;; (add-hook 'exwm-update-title-hook
    ;; 	  (lambda ()
    ;; 	    (when (or (not exwm-instance-name)
    ;; 		      (string-prefix-p "sun-awt-X11-" exwm-instance-name)
    ;; 		      (string= "gimp" exwm-instance-name))
    ;; 	      (exwm-workspace-rename-buffer exwm-title))))

    ;; (exwm-enable)

  #+END_SRC
** DMenu
   #+BEGIN_SRC emacs-lisp
     (unless (package-installed-p 'dmenu)
       (package-install 'dmenu))
     (require 'dmenu)
   #+END_SRC
* Theme
  #+BEGIN_SRC emacs-lisp
    (add-to-list 'custom-theme-load-path "~/.emacs.d/themes")
    ;;(load-theme 'pastelmac t)
    ;;(load-theme 'snowish t)
    ;;(load-theme 'vim-colors t)
    ;;(load-theme 'hydandata-light t)
    ;;(load-theme 'resolve t)
    ;;(load-theme 'mac-classic t)
    ;;(load-theme 'dracula t)
    ;;(load-theme 'afternoon t)
    (load-theme 'occidental t)
  #+END_SRC
* Tooling
** Swiper
   #+BEGIN_SRC emacs-lisp
     (unless (package-installed-p 'swiper)
       (package-install 'swiper))
     (require 'swiper)
     (global-set-key (kbd "\C-s") 'swiper)
   #+END_SRC
** Common Lisp Slime
   #+BEGIN_SRC emacs-lisp
     (unless (package-installed-p 'slime)
       (package-install 'slime))
     (require 'slime)
     (setq inferior-lisp-program "sbcl")
   #+END_SRC
** F#
 #+BEGIN_SRC emacs-lisp

   (use-package comint
     ;; This is based on
     ;; https://oleksandrmanzyuk.wordpress.com/2011/10/23/a-persistent-command-history-in-emacs/
     ;; The idea is to store sessions of comint based modes. For example, to enable
     ;; reading/writing of command history in, say, inferior-haskell-mode buffers,
     ;; simply add turn-on-comint-history to inferior-haskell-mode-hook by adding
     ;; it to the :hook directive
     :config
     (defun comint-write-history-on-exit (process event)
       (comint-write-input-ring)
       (let ((buf (process-buffer process)))
	 (when (buffer-live-p buf)
	   (with-current-buffer buf
	     (insert (format "\nProcess %s %s" process event))))))

     (defun turn-on-comint-history ()
       (let ((process (get-buffer-process (current-buffer))))
	 (when process
	   (setq comint-input-ring-file-name
		 (format "~/.emacs.d/inferior-%s-history"
			 (process-name process)))
	   (comint-read-input-ring)
	   (set-process-sentinel process
				 #'comint-write-history-on-exit))))

     (defun mapc-buffers (fn)
       (mapc (lambda (buffer)
	       (with-current-buffer buffer
		 (funcall fn)))
	     (buffer-list)))

     (defun comint-write-input-ring-all-buffers ()
       (mapc-buffers 'comint-write-input-ring))

     (add-hook 'kill-emacs-hook 'comint-write-input-ring-all-buffers)
     (add-hook 'kill-buffer-hook 'comint-write-input-ring))

   (use-package eglot-fsharp
     :ensure t
     :config
     (add-hook 'inferior-fsharp-mode-hook 'turn-on-comint-history))

   (use-package company-quickhelp
     :ensure t
     :init
     (setq company-quickhelp-delay '1.0)
     :config (company-quickhelp-mode nil))

   (use-package fsharp-mode
     :ensure t
     :mode (("\\.fs$" .  fsharp-mode)
	    ("\\.fsx$" .  fsharp-mode))
     :hook ((fsharp-mode . eglot-ensure)
	    (fsharp-mode . company-mode))
     :config
     (setq inferior-fsharp-program "dotnet fsi")
     (add-hook 'fsharp-mode-hook
	       (lambda ()
		 (add-hook 'before-save-hook
			   (lambda () (eglot-format buffer-file-name))
			   nil 'local))))
 #+END_SRC
** Python
 #+BEGIN_SRC emacs-lisp
   (defun run-buffer ()
   (interactive)
   (shell-command (concat "python3 " buffer-file-name)))
   (global-set-key (kbd "<f9>") 'run-buffer)
   (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)))
 #+END_SRC
** Magit
   #+BEGIN_SRC emacs-lisp
     (unless (package-installed-p 'magit)
       (package-install 'magit))
     (require 'magit)
     (global-set-key (kbd "C-x g") 'magit-status)
   #+END_SRC
** Helm
   #+BEGIN_SRC emacs-lisp
   ;; start helm-help mode (a version of M-x which shows documentaiton)
   (unless (package-installed-p 'helm)
     (package-install 'helm))
   (require 'helm)
   (global-set-key (kbd "M-x") 'helm-M-x)
   ;; better buffer navigation w/ help
   (global-set-key (kbd "C-x b") 'helm-buffers-list)
   (helm-mode 1)
   #+END_SRC
** Multiple Cursors
   #+BEGIN_SRC emacs-lisp
     (unless (package-installed-p 'multiple-cursors)
       (package-install 'multiple-cursors))
     (require 'multiple-cursors)
     (global-set-key (kbd "C-c m c") 'mc/edit-lines)
   #+END_SRC
** PlantUML
 #+BEGIN_SRC elisp
  (unless (package-installed-p 'plantuml-mode)
    (package-install 'plantuml-mode))
  (require 'plantuml-mode)
  (setq org-plantuml-jar-path (expand-file-name "~/.emacs.d/sources/plantuml-jar-gplv2-1.2021.8/plantuml.jar"))
  (add-to-list 'org-src-lang-modes '("plantuml" . plantuml))
  (org-babel-do-load-languages 'org-babel-load-languages '((plantuml . t)))
 #+END_SRC
* Shell
  #+BEGIN_SRC emacs-lisp
    (use-package eshell-syntax-highlighting
      :ensure t
      :config
      (eshell-syntax-highlighting-global-mode +1))
  #+END_SRC
* Org
  #+BEGIN_SRC emacs-lisp
    (require 'org)
    (define-key global-map "\C-cl" 'org-store-link)
    (define-key global-map "\C-ca" 'org-agenda)
    (setq org-log-done 'time)
    (setq org-agenda-files (list "~/.emacs.d/Agenda/work.org"
				 "~/.emacs.d/Agenda/personal.org"))
    (setq org-todo-keywords '((sequence "TODO(t)" "|" "DONE(d)" "CANCELLED(c)")))
    (unless (package-installed-p 'org-bullets)
      (package-install 'org-bullets))
    (require 'org-bullets)
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
  #+END_SRC
* Project
  #+BEGIN_SRC emacs-lisp
    (unless (package-installed-p 'projectile)
      (package-install 'projectile))
    (require 'projectile)

    (projectile-mode +1)
    ;;(define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)

    (use-package dired-sidebar
      :bind (("C-x C-n" . dired-sidebar-toggle-sidebar))
      :ensure t
      :commands (dired-sidebar-toggle-sidebar)
      :init
      (add-hook 'dired-sidebar-mode-hook
		(lambda ()
		  (unless (file-remote-p default-directory)
		    (auto-revert-mode))))
      :config
      (push 'toggle-window-split dired-sidebar-toggle-hidden-commands)
      (push 'rotate-windows dired-sidebar-toggle-hidden-commands)

      ;;(setq dired-sidebar-subtree-line-prefix "__")
      (setq dired-sidebar-theme 'vscode)
      (setq dired-sidebar-use-term-integration t)
      (setq dired-sidebar-use-custom-font t))

    (defun sidebar-toggle ()
      "Toggle both `dired-sidebar' and `ibuffer-sidebar'."
      (interactive)
      (dired-sidebar-toggle-sidebar)
      (ibuffer-sidebar-toggle-sidebar))

  #+END_SRC
* Styling
** Startup Screen
 #+BEGIN_SRC emacs-lisp
   (use-package dashboard
      :ensure t
      :diminish dashboard-mode
      :config
      (setq dashboard-banner-logo-title "Welcome to MageMacs, a magic GNU Emacs customization")
      (setq dashboard-startup-banner "~/.emacs.d/sources/images/emacs.svg")
      ;;(setq dashboard-startup-banner "~/.emacs.d/sources/images/WarpBlock.png")
      (setq dashboard-items '((recents  . 10)
			      (bookmarks . 10)
			      (projects . 10)))
      (dashboard-setup-startup-hook))
      (fringe-mode 1)
      (scroll-bar-mode -1)
 #+END_SRC
** Interface Options
  #+BEGIN_SRC emacs-lisp
     (menu-bar-mode -1)
     (tool-bar-mode -1)
     (toggle-scroll-bar -1)
     (add-hook 'prog-mode-hook 'linum-mode)
     (display-battery-mode t)
     (display-time-mode t)
     (unless (package-installed-p 'vscode-icon)
     (package-install 'vscode-icon))
     (require 'vscode-icon)
     (unless (package-installed-p 'transpose-frame)
       (package-refresh-contents)
     (package-install 'transpose-frame))
   #+END_SRC
** Font
   #+BEGIN_SRC elisp
     ;; (custom-set-faces
     ;; '(default ((t (:family "Monaco" :foundry "APPL" :slant normal :weight normal :height 120 :width normal)))))
     (custom-set-faces'(default ((t (:family "DejaVu Sans Mono" :foundry "PfEd" :slant normal :weight bold :height 120 :width normal)))))
   #+END_SRC
** Powerline
   #+BEGIN_SRC emacs-lisp
     (unless (package-installed-p 'powerline)
       (package-install 'powerline))
     (require 'powerline)
     (powerline-default-theme)
     (display-battery-mode -1)
   #+END_SRC
